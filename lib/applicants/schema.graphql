type Applicant {
  id: ID!
  firstName: String!
  middleName: String
  lastName: String!
  dateOfBirth: Date!
  gender: Gender!
  customGender: String
  email: String
  phone: String!
  province: Province!
  city: String!
  addressLine1: String!
  addressLine2: String
  postalCode: String!
  rcdUserId: Int
  acceptedTOC: Date
  status: ApplicantStatus
  applications: [Application!]
  guardianId: Int!
  guardian: Guardian!
  medicalInformationId: Int!
  medicalInformation: MedicalInformation!
  permits: [Permit!]
  medicalHistory: [MedicalHistory!]
  recentPermit: Permit
}

input CreateApplicantInput {
  firstName: String!
  middleName: String
  lastName: String!
  dateOfBirth: Date!
  gender: Gender!
  customGender: String
  email: String
  phone: String!
  province: Province!
  city: String!
  addressLine1: String!
  addressLine2: String
  postalCode: String!
  rcdUserId: Int
  acceptedTOC: Date
  medicalInformation: CreateMedicalInformationInput!
  guardian: CreateGuardianInput!
}

type CreateApplicantResult {
  ok: Boolean!
}

type MedicalHistory {
  applicationId: ID!
  physician: Physician!
}

input UpdateApplicantInput {
  id: ID!
  firstName: String
  middleName: String
  lastName: String
  dateOfBirth: Date
  gender: Gender
  customGender: String
  email: String
  phone: String
  province: Province
  city: String
  addressLine1: String
  addressLine2: String
  postalCode: String
  rcdUserId: Int
}

type UpdateApplicantResult {
  ok: Boolean!
}

input ApplicantsFilter {
  order: [[String]]
  permitStatus: PermitStatus
  userStatus: UserStatus
  expiryDateRangeFrom: Date
  expiryDateRangeTo: Date
  search: String
  limit: Int
  offset: Int
}

type QueryApplicantsResult {
  node: [Applicant!]
  totalCount: Int
}
